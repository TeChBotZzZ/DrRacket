#lang racket

(define env '())

(define (lookup varName env)
  (cond ((null? env) (error "Unbound variable" varName))
        ((eq? varName (caar env)) (cdar env))
        (else (lookup varName (cdr env)))))

(define (intVal varName val)
  (set! env (cons (cons varName val) env))
  val)

(define (eval-exp exp env)
  (cond ((number? exp) exp)
        ((symbol? exp) (lookup exp env))
        ((eq? 'expt (car exp))
         (expt (eval-exp (cadr exp) env)
               (eval-exp (caddr exp) env)))
        ((eq? '+ (car exp))
         (apply + (map (lambda (exp) (eval-exp exp env))
                       (cdr exp))))
        ((eq? '- (car exp))
         (apply - (map (lambda (exp) (eval-exp exp env))
                       (cdr exp))))
        ((eq? '* (car exp))
         (apply * (map (lambda (exp) (eval-exp exp env))
                       (cdr exp))))
        ((eq? '/ (car exp))
         (apply / (map (lambda (exp) (eval-exp exp env))
                       (cdr exp))))
        ((eq? 'intVal (car exp)) ; add this clause
         (intVal (cadr exp) (eval-exp (caddr exp) env))) ; add this expression
        (else (error "Unknown operator" (car exp)))))



(define (interpreter env)
  (display "UofL>")
  (let ((input (read)))
    (let ((result (eval-exp input env)))
      (display result)
      (newline)))
  (interpreter env))

(interpreter env)


; Create a terminating Continued Fraction generator for the given rational number.
; Returns one term per call; returns #f when no more terms remaining.
(define make-continued-fraction-gen
  (lambda (rat)
    (let ((num (numerator rat)) (den (denominator rat)))
      (lambda ()
        (if (= den 0)
          #f
          (let ((ret (quotient num den))
                (rem (modulo num den)))
            (set! num den)
            (set! den rem)
            ret))))))

; Return the continued fraction representation of a rational number as a string.
(define rat->cf-string
  (lambda (rat)
    (let* ((cf (make-continued-fraction-gen rat))
           (str (string-append "[" (format "~a" (cf))))
           (sep ";"))
      (let loop ((term (cf)))
        (when term
          (set! str (string-append str (format "~a ~a" sep term)))
          (set! sep ",")
          (loop (cf))))
      (string-append str "]"))))

; Return the continued fraction representation of a rational number as a list of terms.
(define rat->cf-list
  (lambda (rat)
    (let ((cf (make-continued-fraction-gen rat))
          (lst '()))
      (let loop ((term (cf)))
        (when term
          (set! lst (append lst (list term)))
          (loop (cf))))
      lst)))